{"version":3,"sources":["LoginForm.js","MessageItem.js","MessageForm.js","MessageContainer.js","App.js","index.js"],"names":["LoginForm","props","state","username","isError","onChange","bind","onSubmit","event","this","setState","target","value","preventDefault","trim","Form","Message","negative","Header","Input","fluid","action","color","content","placeholder","error","React","Component","MessageItem","Comment","Content","Author","as","message","Metadata","className","moment","date","calendar","Text","isSystem","text","MessageForm","socket","onInputChange","onKeydownHandler","document","addEventListener","removeEventListener","key","navigator","appVersion","indexOf","metaKey","ctrlKey","keyCode","reply","TextArea","rows","Button","labelPosition","icon","primary","MessageContainer","messages","currentOnline","onMessageFormSubmit","currentUsername","Date","now","on","data","emit","Group","size","textAlign","dividing","map","index","Divider","App","io","currentScreen","onUsernameSubmitted","Segment","stacked","Grid","style","height","verticalAlign","Column","maxWidth","renderCurrentScreen","ReactDOM","render","getElementById"],"mappings":"iSA0DeA,E,kDAtDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAU,GACVC,SAAS,GAGX,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBARC,E,qDAWVE,GACPC,KAAKC,SAAS,CACZP,SAAUK,EAAMG,OAAOC,MACvBR,SAAS,M,+BAIJI,GACPA,EAAMK,iBAC6B,KAA/BJ,KAAKP,MAAMC,SAASW,OAOxBL,KAAKR,MAAMM,SAASE,KAAKP,MAAMC,SAASW,QANtCL,KAAKC,SAAS,CACZN,SAAS,M,+BASb,OACE,kBAACW,EAAA,EAAD,CAAMR,SAAUE,KAAKF,UAClBE,KAAKP,MAAME,QACX,kBAACY,EAAA,EAAD,CAASC,UAAQ,GACjB,kBAACD,EAAA,EAAQE,OAAT,mCAGA,KACD,kBAACC,EAAA,EAAD,CACEC,OAAK,EACLC,OAAQ,CACNC,MAAO,OACPC,QAAS,UAEXC,YAAY,gBACZnB,SAAUI,KAAKJ,SACfoB,MAAOhB,KAAKP,MAAME,e,GAhDJsB,IAAMC,W,mCCoBfC,EAnBK,SAAC3B,GACnB,OACE,kBAAC4B,EAAA,EAAD,KAIE,kBAACA,EAAA,EAAQC,QAAT,KACE,kBAACD,EAAA,EAAQE,OAAT,CAAgBC,GAAG,QAAQ/B,EAAMgC,QAAQ9B,UACzC,kBAAC0B,EAAA,EAAQK,SAAT,KACE,0BAAMC,UAAU,QAAQC,IAAOnC,EAAMgC,QAAQI,MAAMC,aAErD,kBAACT,EAAA,EAAQU,KAAT,KACGtC,EAAMgC,QAAQO,SAAW,kBAACxB,EAAA,EAAD,KAAUf,EAAMgC,QAAQQ,MAAkBxC,EAAMgC,QAAQQ,S,SC8C7EC,E,kDA1Db,WAAYzC,GAAQ,IAAD,8BACjB,cAAMA,IACD0C,OAAS,EAAK1C,MAAM0C,OACzB,EAAKzC,MAAQ,CAAE+B,QAAS,IAExB,EAAK1B,SAAW,EAAKA,SAASD,KAAd,gBAChB,EAAKsC,cAAgB,EAAKA,cAActC,KAAnB,gBACrB,EAAKuC,iBAAmB,EAAKA,iBAAiBvC,KAAtB,gBAPP,E,gEAWjBwC,SAASC,iBAAiB,UAAWtC,KAAKoC,oB,6CAG1CC,SAASE,oBAAoB,UAAWvC,KAAKoC,oB,oCAGjCrC,GACZC,KAAKC,SAAS,CAAEuB,QAASzB,EAAMG,OAAOC,U,+BAG/BJ,GACPA,EAAMK,iBACN,IAAIoB,EAAUxB,KAAKP,MAAM+B,QACS,KAA9BxB,KAAKP,MAAM+B,QAAQnB,SAIvBL,KAAKR,MAAMM,SAAS0B,GAEpBxB,KAAKC,SAAS,CACZuB,QAAS,Q,uCAIIzB,GACf,IAAMyC,GACqC,IAAzCC,UAAUC,WAAWC,QAAQ,OAAgB5C,EAAM6C,QAAU7C,EAAM8C,QAE/C,KAAlB9C,EAAM+C,SAAkBN,GAC1BxC,KAAKF,SAASC,K,+BAKhB,OACE,kBAACO,EAAA,EAAD,CAAMR,SAAUE,KAAKF,SAAUiD,OAAK,GAClC,kBAACzC,EAAA,EAAK0C,SAAN,CACEC,KAAM,EACNrD,SAAUI,KAAKmC,cACfhC,MAAOH,KAAKP,MAAM+B,UAEpB,kBAAC0B,EAAA,EAAD,CAAQpC,QAAQ,YAAYqC,cAAc,OAAOC,KAAK,OAAOC,SAAO,S,GArDlDpC,IAAMC,W,kBC+FjBoC,E,kDA5Fb,WAAY9D,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAE8D,SAAU,GAAIC,cAAehE,EAAMgE,eAElD,EAAKtB,OAAS,EAAK1C,MAAM0C,OAEzB,EAAKuB,oBAAsB,EAAKA,oBAAoB5D,KAAzB,gBANV,E,gEASE,IAAD,OAClBG,KAAKC,SAAS,CACZsD,SAAS,GAAD,mBACHvD,KAAKP,MAAM8D,UADR,CAEN,CAEEvB,KAAK,GAAD,OAAKhC,KAAKR,MAAMkE,gBAAhB,qBACJ9B,KAAM+B,KAAKC,MACX7B,UAAU,OAKhB/B,KAAKkC,OAAO2B,GAAG,eAAe,SAACC,GAC7B,EAAK7D,SAAS,CACZsD,SAAS,GAAD,mBAAM,EAAK9D,MAAM8D,UAAjB,CAA2BO,SAIvC9D,KAAKkC,OAAO2B,GAAG,kBAAkB,SAACC,GAChC,EAAK7D,SAAS,CACZsD,SAAS,GAAD,mBACH,EAAK9D,MAAM8D,UADR,CAEN,CAEEvB,KAAK,GAAD,OAAK8B,EAAKpE,SAAV,eACJkC,KAAM+B,KAAKC,MACX7B,UAAU,KAGdyB,cAAeM,EAAKN,mBAIxBxD,KAAKkC,OAAO2B,GAAG,qBAAqB,SAACC,GACnC,EAAK7D,SAAS,CACZsD,SAAS,GAAD,mBACH,EAAK9D,MAAM8D,UADR,CAEN,CAEEvB,KAAK,GAAD,OAAK8B,EAAKpE,SAAV,kBACJkC,KAAM+B,KAAKC,MACX7B,UAAU,KAGdyB,cAAeM,EAAKN,qB,0CAKNhC,GAClBxB,KAAKkC,OAAO6B,KAAK,cAAevC,GAChCxB,KAAKC,SAAS,CACZsD,SAAS,GAAD,mBACHvD,KAAKP,MAAM8D,UADR,CAEN,CACE7D,SAAUM,KAAKR,MAAMkE,gBACrB1B,KAAMR,EACNI,KAAM+B,KAAKC,a,+BAOjB,OACE,kBAACxC,EAAA,EAAQ4C,MAAT,KACE,kBAACvD,EAAA,EAAD,CAAQwD,KAAK,OAAOC,UAAU,QAAQrD,MAAM,OAAOsD,UAAQ,GAA3D,mBACmBnE,KAAKP,MAAM+D,eAE7BxD,KAAKP,MAAM8D,SAASa,KAAI,SAAC5C,EAAS6C,GAAV,OACvB,kBAAC,EAAD,CAAa7B,IAAK6B,EAAO7C,QAASA,OAEpC,kBAAC8C,EAAA,EAAD,MACA,kBAAC,EAAD,CACEZ,gBAAiB1D,KAAKR,MAAMkE,gBAC5B5D,SAAUE,KAAKyD,2B,GAtFMxC,IAAMC,W,kBCiEtBqD,E,kDA/Db,aAAe,IAAD,8BACZ,gBACKrC,OAASsC,IAAG,KAEjB,EAAK/E,MAAQ,CACXgF,cAAe,cACff,gBAAiB,GACjBF,cAAe,GAGjB,EAAKkB,oBAAsB,EAAKA,oBAAoB7E,KAAzB,gBAVf,E,gEAaMH,GAAW,IAAD,OAC5BM,KAAKkC,OAAO6B,KAAK,WAAYrE,GAE7BM,KAAKkC,OAAO2B,GAAG,SAAS,SAACC,GACvB,EAAK7D,SAAS,CACZuD,cAAeM,EAAKN,cACpBE,gBAAiBhE,EACjB+E,cAAe,oB,4CAMnB,MAAiC,gBAA7BzE,KAAKP,MAAMgF,cAEX,kBAACE,EAAA,EAAD,CAASC,SAAO,GACd,kBAAC,EAAD,CAAW9E,SAAUE,KAAK0E,uBAGQ,eAA7B1E,KAAKP,MAAMgF,cAElB,kBAACE,EAAA,EAAD,CAASC,SAAO,EAACV,UAAU,QACzB,kBAAC,EAAD,CACEV,cAAexD,KAAKP,MAAM+D,cAC1BE,gBAAiB1D,KAAKP,MAAMiE,gBAC5BxB,OAAQlC,KAAKkC,eANd,I,+BAcP,OACE,kBAAC2C,EAAA,EAAD,CAAMtD,GAAIoD,IACRT,UAAU,SACVY,MAAO,CAAEC,OAAQ,SACjBC,cAAc,UAEd,kBAACH,EAAA,EAAKI,OAAN,CAAaH,MAAO,CAAEI,SAAU,MAC9B,kBAACzE,EAAA,EAAD,CAAQc,GAAG,KAAKV,MAAM,OAAOqD,UAAU,UAAvC,YAGClE,KAAKmF,4B,GAzDEjE,aCFlBkE,IAASC,OACL,kBAAC,EAAD,MACAhD,SAASiD,eAAe,W","file":"static/js/main.607bd94e.chunk.js","sourcesContent":["import React from \"react\";\nimport { Form, Input, Message } from \"semantic-ui-react\";\n\nclass LoginForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: \"\",\n      isError: false\n    };\n\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onChange(event) {\n    this.setState({\n      username: event.target.value,\n      isError: false\n    });\n  }\n\n  onSubmit(event) {\n    event.preventDefault();\n    if (this.state.username.trim() === \"\") {\n      this.setState({\n        isError: true\n      });\n      return;\n    }\n\n    this.props.onSubmit(this.state.username.trim());\n  }\n\n  render() {\n    return (\n      <Form onSubmit={this.onSubmit}>\n        {this.state.isError ? \n         <Message negative>\n         <Message.Header>User name cannot be blank</Message.Header>\n        \n       </Message>\n       : null}\n        <Input\n          fluid\n          action={{\n            color: \"blue\",\n            content: \"Submit\",\n          }}\n          placeholder=\"Enter name...\"\n          onChange={this.onChange}\n          error={this.state.isError}\n        />\n      </Form>\n    );\n  }\n}\n\nexport default LoginForm;\n","import React from \"react\";\nimport moment from \"moment\";\nimport { Comment, Message } from \"semantic-ui-react\";\n\nconst MessageItem = (props) => {\n  return (\n    <Comment>\n      {/* <div className=\"avatar\">\n        <img src={faker.image.avatar()} alt={props.message.name} />\n      </div> */}\n      <Comment.Content>\n        <Comment.Author as=\"span\">{props.message.username}</Comment.Author>\n        <Comment.Metadata>\n          <span className=\"date\">{moment(props.message.date).calendar()}</span>\n        </Comment.Metadata>\n        <Comment.Text>\n          {props.message.isSystem ? <Message>{props.message.text}</Message> : props.message.text}\n          </Comment.Text>\n      </Comment.Content>\n    </Comment>\n  );\n};\n\nexport default MessageItem;\n","import React from \"react\";\nimport { Form, Button } from \"semantic-ui-react\";\n\nclass MessageForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.socket = this.props.socket;\n    this.state = { message: \"\" };\n\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onInputChange = this.onInputChange.bind(this);\n    this.onKeydownHandler = this.onKeydownHandler.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.onKeydownHandler);\n  }\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.onKeydownHandler);\n  }\n\n  onInputChange(event) {\n    this.setState({ message: event.target.value });\n  }\n\n  onSubmit(event) {\n    event.preventDefault();\n    let message = this.state.message\n    if (this.state.message.trim() === \"\") {\n      return;\n    }\n\n    this.props.onSubmit(message);\n\n    this.setState({\n      message: \"\",\n    });\n  }\n\n  onKeydownHandler(event) {\n    const key =\n      navigator.appVersion.indexOf(\"Mac\") !== -1 ? event.metaKey : event.ctrlKey;\n\n    if (event.keyCode === 13 && key) {\n      this.onSubmit(event);\n    }\n  }\n\n  render() {\n    return (\n      <Form onSubmit={this.onSubmit} reply> \n        <Form.TextArea\n          rows={2}\n          onChange={this.onInputChange}\n          value={this.state.message}\n        />\n        <Button content='Add Reply' labelPosition='left' icon='edit' primary />\n      </Form>\n    );\n  }\n}\n\nexport default MessageForm;\n","import React from \"react\";\nimport MessageItem from \"./MessageItem\";\nimport MessageForm from \"./MessageForm\";\nimport { Comment, Header, Divider } from \"semantic-ui-react\";\n\nclass MessageContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { messages: [], currentOnline: props.currentOnline };\n\n    this.socket = this.props.socket;\n\n    this.onMessageFormSubmit = this.onMessageFormSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      messages: [\n        ...this.state.messages,\n        {\n          //username: \"Admin\",\n          text: `${this.props.currentUsername} (you) connected!`,\n          date: Date.now(),\n          isSystem: true\n        },\n      ],\n    });\n\n    this.socket.on(\"new-message\", (data) => {\n      this.setState({\n        messages: [...this.state.messages, data],\n      });\n    });\n\n    this.socket.on(\"user-connected\", (data) => {\n      this.setState({\n        messages: [\n          ...this.state.messages,\n          {\n            //username: \"Admin\",\n            text: `${data.username} connected!`,\n            date: Date.now(),\n            isSystem: true\n          },\n        ],\n        currentOnline: data.currentOnline,\n      });\n    });\n\n    this.socket.on(\"user-disconnected\", (data) => {\n      this.setState({\n        messages: [\n          ...this.state.messages,\n          {\n            //username: \"Admin\",\n            text: `${data.username} disconnected!`,\n            date: Date.now(),\n            isSystem: true\n          },\n        ],\n        currentOnline: data.currentOnline,\n      });\n    });\n  }\n\n  onMessageFormSubmit(message) {\n    this.socket.emit(\"new-message\", message);\n    this.setState({\n      messages: [\n        ...this.state.messages,\n        {\n          username: this.props.currentUsername,\n          text: message,\n          date: Date.now(),\n        },\n      ],\n    });\n  }\n\n  render() {\n    return (\n      <Comment.Group>\n        <Header size='tiny' textAlign='right' color=\"grey\" dividing>\n          CURRENT ONLINE: {this.state.currentOnline}\n        </Header>\n        {this.state.messages.map((message, index) => (\n          <MessageItem key={index} message={message} />\n        ))}\n        <Divider/>\n        <MessageForm\n          currentUsername={this.props.currentUsername}\n          onSubmit={this.onMessageFormSubmit}\n        />\n      </Comment.Group>\n    );\n  }\n}\n\nexport default MessageContainer;\n","import React, { Component } from \"react\";\nimport io from \"socket.io-client\";\nimport LoginForm from \"./LoginForm\";\nimport MessageContainer from \"./MessageContainer\";\nimport { Grid, Segment, Header } from \"semantic-ui-react\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.socket = io(`/`);\n\n    this.state = {\n      currentScreen: \"LoginScreen\",\n      currentUsername: \"\",\n      currentOnline: 0,\n    };\n\n    this.onUsernameSubmitted = this.onUsernameSubmitted.bind(this);\n  }\n\n  onUsernameSubmitted(username) {\n    this.socket.emit(\"new-user\", username);\n\n    this.socket.on(\"login\", (data) => {\n      this.setState({\n        currentOnline: data.currentOnline,\n        currentUsername: username,\n        currentScreen: \"ChatScreen\",\n      });\n    });\n  }\n\n  renderCurrentScreen() {\n    if (this.state.currentScreen === \"LoginScreen\") {\n      return (\n        <Segment stacked>\n          <LoginForm onSubmit={this.onUsernameSubmitted} />\n        </Segment>\n      );\n    } else if (this.state.currentScreen === \"ChatScreen\") {\n      return (\n        <Segment stacked textAlign=\"left\">\n          <MessageContainer\n            currentOnline={this.state.currentOnline}\n            currentUsername={this.state.currentUsername}\n            socket={this.socket}\n          />\n        </Segment>\n      );\n    }\n  }\n\n  render() {\n    return (\n      <Grid as={Segment}\n        textAlign=\"center\"\n        style={{ height: \"100vh\" }}\n        verticalAlign=\"middle\"\n      >\n        <Grid.Column style={{ maxWidth: 650 }}>\n          <Header as=\"h2\" color=\"blue\" textAlign=\"center\">\n            CHAT APP\n          </Header>\n          {this.renderCurrentScreen()}\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);"],"sourceRoot":""}